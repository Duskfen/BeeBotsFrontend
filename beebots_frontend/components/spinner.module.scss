@use "sass:math";

$small: 8; //Number of small dots
$smallsize:8%;
$big:6; // Number of big dots
$bigsize:10%;

//Not these
$radius:30%-$bigsize;
$smalldots: ();
$smalldotpositions: ();
$smalldotsizes: ();
$as:math.div(360deg, $small);
$bigdots: ();
$bigdotpositions:();
$bigdotsizes: ();
$ab:math.div(360deg, $big);

@function pi() {
   @return 3.14159265359;
 }
 
 @function fact($number) {
   $value: 1;
   @if $number > 0 {
     @for $i from 1 through $number {
       $value: $value * $i;
     }
   }
   @return $value;
 }

 @function cos($angle) {
   $cos: 0;
   $angle: rad($angle);
   // Iterate a bunch of times.
   @for $i from 0 through 10 {
     $cos: $cos + math.div(pow(-1, $i) * pow($angle, 2 * $i), fact(2 * $i));
   }
   @return $cos;
 }
 
 @function tan($angle) {
   @return math.div(sin($angle), cos($angle));
 }

@function pow($number, $exp) {
   $value: 1;
   @if $exp > 0 {
     @for $i from 1 through $exp {
       $value: $value * $number;
     }
   } @else if $exp < 0 {
     @for $i from 1 through -$exp {
       $value: math.div($value, $number);
     }
   }
   @return $value;
 }

 @function rad($angle) {
   $unit: unit($angle);
   $unitless: math.div($angle, $angle * 0 + 1);
   // If the angle has 'deg' as unit, convert to radians.
   @if $unit == deg {
     $unitless: math.div($unitless, 180) * pi();
   }
   @return $unitless;
 }

@function sin($angle) {
   $sin: 0;
   $angle: rad($angle);
   // Iterate a bunch of times.
   @for $i from 0 through 10 {
     $sin: $sin + math.div(pow(-1, $i) * pow($angle, (2 * $i + 1)), fact(2 * $i + 1));
   }
   @return $sin;
 }
/*
	For small and big construct:
	• List of radial-gradients/var(--dot) [all the same, can be different for different colours] => background-image
	• List of positions, using trig to go around a radius => background-position
	• List of sizes [all the same, can be different for different sizes] => background-size
	Also background-repeat: no-repeat; and background-color:white; are vital
*/
@for $i from 0 to $small {
	$smalldots: $smalldots, var(--dot);
	$smalldotpositions: $smalldotpositions, (50% + (($radius+$smallsize*0.5)*sin($as*$i))) (50% + (($radius+$smallsize*0.5)*cos($as*$i)));
	$smalldotsizes: $smalldotsizes, $smallsize $smallsize;
}
@for $i from 0 to $big {
	$bigdots: $bigdots, var(--dot);
	$bigdotpositions: $bigdotpositions, (50% + (($radius+$bigsize*0.5)*sin($ab*$i))) (50% + (($radius+$bigsize*0.5)*cos($ab*$i)));
	$bigdotsizes: $bigdotsizes, $bigsize $bigsize;
}
.spinner {
		position: relative;
      background-color:white;
		filter: blur(1vmin) contrast(12); //Blur so the dots overlap, then use contrast to make the overlapping blurred parts solid.
		&:before, &:after {
			display:block;
			content: '';
			position: absolute;
			width:100%;
			height:100%;
			transform-origin:50% 50%;
			background-color:none;
			background-repeat:no-repeat;
			animation:spin linear infinite;
			mix-blend-mode:multiply; //:after has a white background, to make it show through use multiply so the black becomes visible
		}
		&:before {
			background-image:$smalldots;
			background-position:$smalldotpositions;
			background-size:$smalldotsizes;
			animation-duration:10s;
		}
		&:after {
			background-image:$bigdots;
			background-position:$bigdotpositions;
			background-size:$bigdotsizes;
			animation-duration:4s;
		}
	}

@keyframes spin {
	0% {
		transform:rotate(0deg);
	}
	100% {
		transform:rotate(360deg);
	}
}